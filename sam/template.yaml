AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Calorimeter processing and storage in S3/DynamoDB. Access with REST API

Parameters:
  SourceBucketName:
    Type: String
    Default: "Source"
  DestinationBucketName:
    Type: String
    Default: "Destination"
  TableName:
    Type: String
    Default: "Calorimeter"
  StageName:
    Type: String
    Default: v1
    Description: Name of API stage.
  AppName:
    Type: String
    Default: api-cal
    Description: Name of application.

Resources:
## Lambda Function
  calorimeterlambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      CodeUri: .
      Description: 'Calorimeter processing function'
      MemorySize: 1024  
      Timeout: 900
      Environment:
        Variables:
          deriv_size: '8'
          processed_bucket: !Ref DestinationBucketName
          table: !Ref TableName
          volume: '30000'
          participant: 'na'
      Events:
        FileCreation:
          Type: S3
          Properties:
            Bucket: !Ref SourceBucket
            Events:
              - 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucketName
        - S3CrudPolicy:
            BucketName: !Ref DestinationBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - CloudWatchPutMetricPolicy: {}

# API Role
  APIGatewayRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
                - 'sts:AssumeRole'
              Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
        Policies:
          - PolicyName: APIGatewayDynamoDBPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Query'
                  # Including * in the resource Arn allows access to the DynamoDB table and indexes
                  Resource: !Sub
                    - '${varTableArn}*'
                    - varTableArn: !GetAtt calorimetertable.Arn

## Source and Destination Buckets
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName
  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DestinationBucketName

## API
  Api:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AppName}'
      ApiKeySourceType: HEADER
  CalResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'cal'
  CalMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref CalResource
      HttpMethod: POST
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB PutItem
          # Using single-line, stringified JSON as the mapping template
          # Example body when making API request: {"artist": "The Beatles", "album": "Abbey Road"}
          # Use the unique id of the API context variable (eg: $context.requestId) as the DynamoDB item id
          application/json: "{\"TableName\":\"Calorimeter\",\"Item\":{\"id\":{\"S\":\"$context.requestId\"},\"StudyTime\":{\"S\":\"$input.path('$.StudyTime')\"},\"VO2\":{\"S\":\"$input.path('$.VO2')\"},\"VCO2\":{\"S\":\"$input.path('$.VCO2')\"},\"RQ\":{\"S\":\"$input.path('$.RQ')\"},\"InflowO2\":{\"S\":\"$input.path('$.InflowO2')\"},\"OutflowO2\":{\"S\":\"$input.path('$.OutflowO2')\"},\"OutflowCO2\":{\"S\":\"$input.path('$.OutflowCO2')\"},\"dO2\":{\"S\":\"$input.path('$.dO2')\"},\"dCO2\":{\"S\":\"$input.path('$.dCO2')\"},\"InflowRate\":{\"S\":\"$input.path('$.InflowRate')\"},\"OutflowRate\":{\"S\":\"$input.path('$.OutflowRate')\"},\"Participant\":{\"S\":\"$input.path('$.Participant')\"},\"HaldaneInflow\":{\"S\":\"$input.path('$.HaldaneInflow')\"},\"MFCFlow_2\":{\"S\":\"$input.path('$.MFCFlow_2')\"},\"MFCFlow_4\":{\"S\":\"$input.path('$.MFCFlow_4')\"}}}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: '200'
  CalTimeResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref CalResource
      PathPart: '{StudyTime}'
  CalTimeMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref CalTimeResource
      HttpMethod: GET
      ApiKeyRequired: true
      AuthorizationType: NONE
      RequestParameters:
        # Determines whether the path parameter (eg: time) is required
        method.request.path.StudyTime: true
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.StudyTime: method.request.path.StudyTime
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB Query
          # Using single-line, stringified JSON as the mapping template
          # Use $util.urlDecode($input.params('pathname')) to decode if the url path value contains spaces
          # A + or %20 may be used as a space in the url
          application/json: "{\"TableName\":\"Calorimeter\",\"IndexName\":\"StudyTime-Index\",\"KeyConditionExpression\":\"StudyTime=:v1\",\"ExpressionAttributeValues\":{\":v1\":{\"S\":\"$util.urlDecode($input.params('StudyTime'))\"}}}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              # Modify the response of the DynamoDB Query before sending back to the caller
              # Using single-line Velocity Template Language (VTL) code as the mapping template
              # \n represents a new line, \t represents a tab character, \" represents a single quote character
              # Example response: {"music":[{"id":"38bfb57e-a5a8-4fed-9a4f-391d66d5e987","artist":"The Beatles","album":"Abbey Road"}]}
              application/json: "#set($inputRoot = $input.path('$'))\n{\n\t\"calorimeter\": [\n\t\t#foreach($field in $inputRoot.Items) {\n\t\t\t\"id\": \"$field.id.S\",\n\t\t\t\"StudyTime\": \"$field.StudyTime.S\",\n\t\t\t\"VO2\": \"$field.VO2.S\",\n\t\t\t\"VCO2\": \"$field.VCO2.S\",\n\t\t\t\"RQ\": \"$field.RQ.S\",\n\t\t\t\"InflowO2\": \"$field.InflowO2.S\",\n\t\t\t\"InflowCO2\": \"$field.InflowCO2.S\",\n\t\t\t\"OutflowO2\": \"$field.OutflowO2.S\",\n\t\t\t\"dO2\": \"$field.dO2.S\",\n\t\t\t\"dCO2\": \"$field.dCO2.S\",\n\t\t\t\"InflowRate\": \"$field.InflowRate.S\",\n\t\t\t\"OutflowRate\": \"$field.OutflowRate.S\",,\n\t\t\t\"Participant\": \"$field.Participant.S\",\n\t\t\t\"HaldaneInflow\": \"$field.HaldaneInflow.S\",\n\t\t\t\"MFCFlow_2\": \"$field.MFCFlow_2.S\",\n\t\t\t\"MFCFlow_4\": \"$field.MFCFlow_4.S\",\n\t\t}#if($foreach.hasNext),#end\n\t\t#end\n\t]\n}"
      MethodResponses:
        - StatusCode: '200'
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - CalTimeMethodGet
    Properties:
      RestApiId: !Ref Api
      StageName: !Sub '${StageName}'
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiDeployment
    Properties:
      Enabled: true
      Name: !Sub '${AppName}-apikey'
      StageKeys:
        - RestApiId: !Ref Api
          StageName: !Sub '${StageName}'
  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: !Sub '${StageName}'
      Throttle:
        RateLimit: 500
        BurstLimit: 1000
      UsagePlanName: !Sub '${AppName}-usage-plan'
      Quota:
        Limit: 10000
        Period: MONTH
  ApiUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyType: API_KEY
      KeyId: !Ref ApiKey
      UsagePlanId: !Ref ApiUsagePlan

## Database
  calorimetertable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
        - AttributeName: Participant
          AttributeType: S
        - AttributeName: StudyTime
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableName
      GlobalSecondaryIndexes:
              - IndexName: StudyTime-Index
                KeySchema:
                  - AttributeName: StudyTime
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
              - IndexName: Participant-Index
                KeySchema:
                  - AttributeName: Participant
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
## Outputs
Outputs:
  SourceBucketName:
    Value: !Ref SourceBucketName
    Description: S3 Bucket for object storage
  DestinationBucketName:
    Value: !Ref DestinationBucketName
    Description: S3 destination Bucket for object storage
  DatabaseName:
    Value: !Ref TableName
    Description: DynamoDB Database
  FunctionArn:
    Value: !Ref calorimeterlambda
    Description: Calorimeter function Arn
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
      - ApiId: !Ref Api
  ApiKeyId:
    Description: API Key Id
    Value: !Ref ApiKey